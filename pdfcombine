#!/usr/bin/env python3
'''pdfcombine
  Combine several PDFs to a single PDF.

Usage:
  pdfcombine [options] <files>...

Options:
      --openleft      Enforce that the next PDF always starts on an even page.
      --openright     Enforce that the next PDF always starts on an odd page.
      --title=<N>     Set the title  of the output PDF.
      --author=<N>    Set the author of the output PDF.
      --no-bookmarks  Do not use original filenames as bookmarks.
      --add-ps=<N>    Add commands to the generated PostScript program (inspect using '--verbose').
      --ps=<N>        Overwrite the automatically generated PostScript program.
      --no-ps         Do not run any PostScript program (to edit meta-data).
  -o, --output=<N>    Name of the output file. [default: binder.pdf]
  -s, --silent        Do not print any progress.
      --verbose       Verbose all commands.
  -h, --help          Show help.
      --version       Show version.

(c - MIT) T.W.J. de Geus | tom@geus.me | www.geus.me
'''

# ========================================= LOAD LIBRARIES =========================================

import sys, os, re, docopt, subprocess, shutil, tempfile

# ==================================== RAISE COMMAND LINE ERROR ====================================

def Error(msg,exit_code=1):
  print(msg)
  sys.exit(exit_code)

# ========================================== RUN COMMAND ===========================================

def Run(cmd,verbose=False,**kwargs):

  out = subprocess.check_output(cmd,shell=True).decode('utf-8')

  if verbose:
    print(cmd)
    print(out,end='')

  return out

# ========================================== MAIN PROGRAM ==========================================

# ---------------------------------- parse command line arguments ----------------------------------

# parse command-line arguments
args = docopt.docopt(__doc__,version='0.3.0')

# change keys to simplify implementation:
# - remove leading "-" and "--" from options
args = {re.sub(r'([\-]{1,2})(.*)',r'\2',key): args[key] for key in args}
# - change "-" to "_" to facilitate direct use in print format
args = {key.replace('-','_'): args[key] for key in args}
# - remove "<...>"
args = {re.sub(r'(<)(.*)(>)',r'\2',key): args[key] for key in args}

# --------------------------------------------- check ----------------------------------------------

# required command
if not shutil.which('gs'):
  Error('"gs" not found')

# check exclusive options
if args['openright'] and args['openleft']:
  Error('"--openright" and "--openleft" are exclusive options')

# check that files exist
for file in args['files']:
  if not os.path.isfile(file):
    Error('"%s" does not exist' % file)

# -------------------------------------- read number of pages --------------------------------------

if args['openright'] or args['openright'] or not args['no_bookmarks']:

  if args['verbose']: print('\n---- reading number of pages per files ----\n')

  pages = []

  for file in args['files']:

    cmd = 'gs -q -dNODISPLAY -c "({0:s}) (r) file runpdfbegin pdfpagecount = quit"'.format(file)

    pages += [int(Run(cmd,**args))]

  even = [False if n%2!=0 else True for n in pages]

# ------------------------------------ set GhostScript commands ------------------------------------

# set commands
if args['ps']:
  ps = args['ps']

# automatically generate commands
else:
  # - initialize
  ps = []
  # - add title
  if args['title']:
    ps += ['/Title ({title:s})'.format(**args)]
  # - add author
  if args['author']:
    ps += ['/Author ({author:s})'.format(**args)]
  # - add bookmarks
  if not args['no_bookmarks']:
    i = 1
    for file, n in zip(args['files'], pages):
      ps += ['/Page {0:d} /Title ({1:s}) /OUT pdfmark'.format(i, file)]
      i  += n
  # - combine
  ps = '[ '+'\n[ '.join(ps)
  # - add other commands
  if args['add_ps']: ps += '\n'+args['add_ps']

# store in temporary file
if not args['no_ps']:
  # - get filename
  tempFile = os.path.join(tempfile.mkdtemp(), 'pdfcombine.ps')
  # - store
  open(tempFile,'w').write(ps)
  # - verbose
  if args['verbose']:
    print('\n---- created "{0:s}":\n\n{1:s}'.format(tempFile,ps))

# --------------------------------------- create/run command ---------------------------------------

if args['verbose']: print('\n---- combining files ----\n')

# initiate command
cmd = 'gs -sDEVICE=pdfwrite -dBATCH -dNOPAUSE -q -sPAPERSIZE=a4 -o "{output:s}"'.format(**args)

# open left: start with a blank page
if args['openleft']:
  cmd += ' -c showpage'

# loop of insert the files in order of appearance
for i in range(len(args['files'])):
  # - optionally: insert banks page if the previous document had an odd number of pages
  if i>0:
    if (args['openleft'] or args['openright']) and not even[i-1]:
      cmd += ' -c showpage'
  # - inset new document
  cmd += ' -f "%s"'%args['files'][i]

# - add pdfmarks
if not args['no_ps']:
  cmd += ' '+tempFile

# execute the command
Run(cmd,**args)

# ------------------------------ remove temporary file and directory -------------------------------

if args['verbose']: print('\n---- cleaning up ----\n')

if not args['no_ps']:
  # - execute
  shutil.rmtree(os.path.split(tempFile)[0])
  # - verbose
  if args['verbose']: print('rm -r {tempFile:s}'.format(tempFile=tempFile))

# ----------------------------------------- print progress -----------------------------------------

if not args['silent']: print('[pdfcombine] {output:s}'.format(**args))
