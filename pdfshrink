#!/usr/bin/env python3
'''pdfshrink
  Shrink a PDF's file size using GhostScript.

Usage:
  pdfshrink [options] <files>...

Options:
  -o, --output=<N>  Specify output file. (default: overwrite the input file(s))
  -s, --silent      Do not print any progress.
      --verbose     Verbose all commands.
  -h, --help        Show help.
      --version     Show version.

(c - MIT) T.W.J. de Geus | tom@geus.me | www.geus.me
'''

# ========================================= LOAD LIBRARIES =========================================

import sys, os, re, docopt, subprocess, shutil, tempfile

# ==================================== RAISE COMMAND LINE ERROR ====================================

def Error(msg,exit_code=1):
  print(msg)
  sys.exit(exit_code)

# ========================================== RUN COMMAND ===========================================

def Run(cmd,verbose=False,**kwargs):

  out = subprocess.check_output(cmd,shell=True).decode('utf-8')

  if verbose:
    print(cmd)
    print(out,end='')

  return out

# ========================================== MAIN PROGRAM ==========================================

# ---------------------------------- parse command line arguments ----------------------------------

# parse command-line arguments
args = docopt.docopt(__doc__,version='0.0.1')

# change keys to simplify implementation:
# - remove leading "-" and "--" from options
args = {re.sub(r'([\-]{1,2})(.*)',r'\2',key): args[key] for key in args}
# - change "-" to "_" to facilitate direct use in print format
args = {key.replace('-','_'): args[key] for key in args}
# - remove "<...>"
args = {re.sub(r'(<)(.*)(>)',r'\2',key): args[key] for key in args}

# --------------------------------------------- check ----------------------------------------------

# required command
if not shutil.which('gs'):
  Error('"gs" not found')

# check that files exist
for file in args['files']:
  if not os.path.isfile(file):
    Error('"%s" does not exist' % file)

# check exclusive option
if args['output'] and len(args['files']) > 1:
  Error('"--output" can only be specified of not more than one file provided')

# -------------------------------------------- convert ---------------------------------------------

# loop over input files
for file in args['files']:

  # - set output file
  if args['output']: out = args['output']
  else             : out = os.path.join(tempfile.mkdtemp(), 'pdfshrink.pdf')

  # - define command
  cmd = ' '.join([
    'gs -q -dBATCH -dNOPAUSE -sDEVICE=pdfwrite',
    '-dPDFSETTINGS=/printer',
    '-dCompatibilityLevel=1.3',
    '-dColorImageDownsampleType=/Bicubic'
    '-dColorImageResolution=72',
    '-dGrayImageDownsampleType=/Bicubic',
    '-dGrayImageResolution=72',
    '-dMonoImageDownsampleType=/Bicubic',
    '-dMonoImageResolution=38',
    '-dOptimize=true',
    '-dEmbedAllFonts=true',
    '-dSubsetFonts=true',
    '-dDownsampleColorImages=true',
    '-dDownsampleGrayImages=true',
    '-dDownsampleMonoImages=true',
    '-dHaveTransparency=false',
    '-dUseCIEColor',
    '-dColorConversionStrategy=/sRGB',
    '-sOutputFile="%s"'%out,
    '"%s"'%file,
    '2>/dev/null',
  ])

  # - run command
  Run(cmd,**args)

  # - remove temporary file
  if not args['output']:
    # -- move
    shutil.move(out, file)
    # -- remove
    shutil.rmtree(os.path.split(out)[0])
    # -- verbose
    if args['verbose']:
      print('mv {out:s} {file:s}'.format(out=out,file=file))
      print('rm -r {out:s}'.format(out=out))

  # - print progress
  if not args['silent']:
    if args['output']: print('[pdfshrink] {file:s} {out:s}'.format(file=file,out=out))
    else             : print('[pdfshrink] {file:s}'.format(file=file))
